services:
    frontend:
        container_name: frontend
        image: frontend:1.0.0
        build:
            context: ./frontend
            dockerfile: react.dockerfile
        ports:
            - "${REACT_PORT}:${REACT_PORT}"
        depends_on:
            backend:
                condition: service_started

    backend:
        container_name: backend
        image: backend:1.0.0
        build:
            context: ./backend
            dockerfile: go.dockerfile
        environment:
            APP_ENV: ${GO_APP_ENV}
            DB_HOST: ${POSTGRES_HOST}
            DB_PORT: ${POSTGRES_PORT}
            DB_NAME: ${POSTGRES_DB}
            DB_USER: ${POSTGRES_USER}
            DB_PASSWORD: ${POSTGRES_PASSWORD}
            GO_JWT_SECRET: ${GO_JWT_SECRET}
        ports:
            - "${GO_PORT}:${GO_PORT}"
        depends_on:
            database:
                condition: service_healthy
                restart: true

    database:
        container_name: database
        image: postgres:17.4
        environment:
            PGPORT: ${POSTGRES_PORT}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "${POSTGRES_PORT}:${POSTGRES_PORT}"
        volumes:
            - database_data:/var/lib/postgresql/data
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
                ]
            interval: 10s
            timeout: 5s
            retries: 5

volumes:
    database_data: {}
